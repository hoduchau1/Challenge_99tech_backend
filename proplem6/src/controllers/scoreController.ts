import { Request, Response } from "express";
import Score from "../models/score";
import { Server } from "socket.io";

let io: Server;  // Bi·∫øn ƒë·ªÉ l∆∞u io

export function setSocketServer(socketServer: Server) {
    io = socketServer;
}

export async function updateScore(req: Request, res: Response): Promise<void> {
    try {
        const { username, score } = req.body;
        if (!username || typeof score !== "number") {
            res.status(400).json({ error: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá!" });
            return;
        }

        if (score > 10) {
            res.status(400).json({ error: "your score high than 10!" });
            return;
        }
        let user = await Score.findOne({ username });
        if (user) {
            user.score = score;
        } else {
            user = new Score({ username, score });
        }
        await user.save();

        // L·∫•y danh s√°ch top 10 v√† ph√°t s·ª± ki·ªán
        const topScores = await Score.find().sort({ score: -1 }).limit(10);
        console.log("üì¢ Ph√°t s·ª± ki·ªán updateLeaderboard:", topScores);
        io.emit("updateLeaderboard", topScores); // Ph√°t s·ª± ki·ªán c·∫≠p nh·∫≠t b·∫£ng x·∫øp h·∫°ng

        res.status(200).json({ message: "C·∫≠p nh·∫≠t ƒëi·ªÉm th√†nh c√¥ng!", data: topScores });
    } catch (error) {
        console.error("‚ùå L·ªói:", error);
        res.status(500).json({ error: "L·ªói server!" });
    }
}

export async function getTopScores(req: Request, res: Response): Promise<void> {
    try {
        const topScores = await Score.find().sort({ score: -1 }).limit(10);
        res.status(200).json({ topScores });
    } catch (error) {
        console.error("L·ªói khi l·∫•y b·∫£ng x·∫øp h·∫°ng:", error);
        res.status(500).json({ error: "L·ªói server!" });
    }
}
